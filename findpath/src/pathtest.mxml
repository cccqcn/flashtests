<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" 
				minWidth="800" minHeight="600" mouseUp="application1_mouseUpHandler(event)"
				 creationComplete="application1_creationCompleteHandler(event)">
	<mx:Script>
		<![CDATA[
			import flash.utils.clearInterval;
			import flash.utils.getTimer;
			import flash.utils.setInterval;
			
			import mx.controls.Button;
			import mx.controls.Label;
			import mx.events.FlexEvent;
			
			private var fromp:int;
			private var top:int;
			private var setflag:int;
			private var test:TestPath;
			
			protected function application1_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				test = new TestPath;
				grids.rawChildren.addChild(test);
				sizetxt.text = Path.instance.bgXgrids + "x" + Path.instance.bgYgrids;
				return;
				datas = [];
				var i:int;
				var xx:int;
				var yy:int;
				var total:int = bgXgrids * bgYgrids;
				var lbl:Label;
				for(i=0;i<total;i++)
				{
					xx = i % bgXgrids;
					yy = Math.floor(i / bgXgrids);
					if(Math.random()<0.3)
					{
						datas.push(1);
					}
					else
					{
						datas.push(0);
					}
					lbl = new Label;
					lbl.data = i;
					lbl.addEventListener(MouseEvent.CLICK, onClick);
					lbl.text = i.toString();//datas[i];
					if(datas[i] == 1)
					{
						lbl.setStyle("color", 0xFFEE00);
					}
					else
					{
						lbl.setStyle("color", 0xFFFFFF);
					}
					lbl.width = 30;
					lbl.x = xx * 30;
					lbl.y = yy * 30;
					lbl.setStyle("paddingLeft", 0);
					lbl.setStyle("paddingRight", 0);
					grids.addChild(lbl);
				}
				setflag = 1;
			}
			
			private function onClick(e:MouseEvent):void
			{
				var lbl:Label = Label(e.currentTarget);
				var i:int = int(lbl.data);
				if(setflag == 1)
				{
					grids.getChildAt(fromp).filters = null;
					fromp = i;
					lbl.filters = [new GlowFilter(0xFFFF00)];
					top = fromp;
				}
				if(setflag == 2)
				{
					grids.getChildAt(fromp).filters = null;
					fromp = top;
					grids.getChildAt(fromp).filters = [new GlowFilter(0xFFFF00)];
					top = i;
					lbl.filters = [new GlowFilter(0xFF0000)];
					findpath();
				}
				if(setflag == 3)
				{
					lbl.setStyle("color", 0xFFEE00);
					Path.instance.datas[lbl.data] = 1;
				}
				if(setflag == 4)
				{
					lbl.setStyle("color", 0xFFFFFF);
					Path.instance.datas[lbl.data] = 0;
				}
			}
			
			protected function settype(value:int):void
			{
				// TODO Auto-generated method stub
				setflag = value;
				test.setflag = value;
				btn1.selected = false;
				btn0.selected = false;
				btngo.selected = false;
				if(value == 3)
				{
					btn1.selected = true;
				}
				if(value == 4)
				{
					btn0.selected = true;
				}
				if(value == 2)
				{
					btngo.selected = true;
				}
			}

			protected function findpath():void
			{
				// TODO Auto-generated method stub
				settype(2);
				return;
				var t1:int = flash.utils.getTimer();
				var arr:Array = Path.instance.find(fromp, top);
				var t2:int = flash.utils.getTimer();
				pathstr.text = arr.toString();
				timetxt.text = (t2 - t1).toString() + "ms";
				grids.graphics.clear();
				grids.graphics.lineStyle(1, 0xFFF000);
				current = 0;
				var fromx:int = arr[current] % bgXgrids;
				var fromy:int = Math.floor(arr[current] / bgXgrids);
				grids.graphics.moveTo(fromx*30+6, fromy*30+8);
				if(interval != 0)
				{
					clearInterval(interval);
				}
				interval = setInterval(drawTimer, 50, arr);
			}

			private var current:int;
			private var interval:int;
			private function drawTimer(arr:Array):void
			{
				var fromx:int = arr[current] % Path.instance.bgXgrids;
				var fromy:int = Math.floor(arr[current] / Path.instance.bgXgrids);
				grids.graphics.lineTo(fromx*30+6, fromy*30+8);
				current++;
				if(current == arr.length)
				{
					clearInterval(interval);
				}
			}


			protected function button1_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var wh:Array = sizetxt.text.split("x");
				test.MAP_WIDTH = wh[0];
				test.MAP_HEIGHT = wh[1];
				Path.instance.bgXgrids = test.MAP_WIDTH;
				Path.instance.bgYgrids = test.MAP_HEIGHT;
				test.reset(Number(level.value));
				return;
				var i:int;
				var lbl:Label;
				for(i=0;i<grids.numChildren;i++)
				{
					datas[i] = (0);
					lbl = Label(grids.getChildAt(i));
					if(datas[i] == 1)
					{
						lbl.setStyle("color", 0xFFEE00);
					}
					else
					{
						lbl.setStyle("color", 0xFFFFFF);
					}
				}
			}


			protected function application1_mouseUpHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				test.mouseflag = false;
			}


			protected function button2_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				sizetxt.text = "45x20";
			}

		]]>
	</mx:Script>
	<mx:Canvas id="grids" x="41" y="95" width="510" height="376" clipContent="false" >
	</mx:Canvas>
	<mx:Button id="btngo" selected="true" x="41" y="10" label="GO" click="findpath()"/>
	<mx:TextArea id="pathstr" x="41" y="40" width="701" height="47"/>
	<mx:TextInput x="175" y="10" id="sizetxt" text="10x8" width="60"/>
	<mx:Button x="340" y="10" label="reset" click="button1_clickHandler(event)"/>
	<mx:Button id="btn1" x="455" y="10" label="1" click="settype(3)"/>
	<mx:Button id="btn0" x="503" y="10" label="0" click="settype(4)"/>
	<mx:Label id="timetxt" x="627" y="12" text="Label" width="115" textAlign="right"/>
	<mx:CheckBox x="584" y="10" label="modify" id="modifybtn"/>
	<mx:Label x="141" y="12" text="尺寸："/>
	<mx:Label x="239" y="12" text="密度："/>
	<mx:HSlider value="0.3" minimum="0" maximum="1" snapInterval="0.1" id="level"  x="266" y="11" width="70"/>
	<mx:Label x="422" y="12" text="编辑："/>
	<mx:Button x="96" y="10" label="45x20" width="41" paddingLeft="0" paddingRight="0" 
			    click="button2_clickHandler(event)"/>
</mx:Application>
