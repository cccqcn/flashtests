<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" creationComplete="windowedapplication1_creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			private var socketServer:ServerSocket;
			private var chientSocket:Array = [];
			private var xml:XML;
			protected function windowedapplication1_creationCompleteHandler(event:FlexEvent):void
			{
				xml = <cross-domain-policy> 
				<allow-access-from domain="*" to-ports="*" /> 
				</cross-domain-policy>;
				// TODO Auto-generated method stub
				socketServer = new ServerSocket();
				socketServer.bind(int(515),"127.0.0.1");
				socketServer.listen();
				trace("服务端启动成功", socketServer.localAddress, socketServer.localPort);
				socketServer.addEventListener(ServerSocketConnectEvent.CONNECT,connet);
				
			}
			private function connet(e:ServerSocketConnectEvent):void
			{
				var socket:Socket = e.socket as Socket;
				chientSocket.push({"obj":socket,"uname":""});
				socket.addEventListener(Event.CLOSE,chientClose);
				socket.addEventListener(ProgressEvent.SOCKET_DATA,redClient);
				trace("客户端上线:"+socket.remoteAddress+":"+socket.remotePort+" "+chientSocket);
				socket.writeUTFBytes("|欢迎进入Ks聊天室...\n | |"+xml);
				socket.flush();
			}
			
			private function redClient(e:ProgressEvent):void
			{
				
				var socket:Socket = e.target as Socket;
				var scokedata:ByteArray = new ByteArray  ;
				socket.readBytes(scokedata,0,0);
				var Str:String = String(scokedata);
				var StrArr:Array = new Array  ;
				StrArr = Str.split("|",Str.length);
				//trace(StrArr);
				var userList:String="-";
				
				for (var o:uint = 0; o < chientSocket.length; o++)
				{
					if (chientSocket[o].uname != null)
					{
						userList +=  chientSocket[o].uname + "-";
					}
				}
				trace(userList);
				
				
				
				
				
				if (StrArr[0] != "")
				{
					for (var i:uint = 0; i < chientSocket.length; i++)
					{
						chientSocket[i].obj.writeUTFBytes(StrArr[0]+"|"+StrArr[1]+"|"+StrArr[2]+"|"+chientSocket.length+"|"+userList);
						chientSocket[i].obj.flush();
					}
				}
				else if (StrArr[0] == "")
				{
					chientSocket[chientSocket.length - 1].uname = StrArr[1];
					for (var j:uint = 0; j<chientSocket.length; j++)
					{
						//trace(chientSocket[j].uname);
					}
				}
				
				
			}

			//客户端关闭监听;
			private function chientClose(e:Event):void
			{
				var socket:Socket = e.target as Socket;
				for (var i:uint = 0; i<chientSocket.length; i++)
				{
					if (chientSocket[i].obj == e.target)
					{
						chientSocket.splice(i,1);
						trace("客户端下线:"+socket.remoteAddress+":"+socket.remotePort+"\n");
						//resetPop();
						break;
					}
				}
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
</s:WindowedApplication>
